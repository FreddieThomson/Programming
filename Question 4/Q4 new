#include <iostream>
#include <ctime>
#include <cmath>


int main()
{
	// Creating variable
int random_distances[1000], i, cycling_distance, running_distance;

	cycling_distance = 40;
	running_distance = 10;

	//Data order is Swim, Cycle, Run 
	float speed[3];
	speed[0] = 6.2;
	speed[1] = 52.8;
	speed[2] = 18.3;

	// time_combination 0 = cycling time | time_combination 1 = running time for flippers and goggles
	// time_combination 2 = cycling time | time_combination 3 = running time for sunglasses and cycling shoes
	float time_combination[4];
	time_combination[0] = speed[1] * 0.935;
	time_combination[1] = speed[2] * 0.79;
	time_combination[2] = speed[1] * 1.1;
	time_combination[3] = speed[2] * 0.9;
	
    // time 0 = cycling time | time 1 = running time for flippers and goggles
	// time 2 = cycling time | time 3 = running time for sunglasses and cycling shoes
	float time[4];
	time[0] = cycling_distance / time_combination[0];
	time[1] = running_distance / time_combination[1];
	time[2] = cycling_distance / time_combination[2];
	time[3] = running_distance / time_combination[3];
	
	float full_time_fg[1000], full_time_cs[1000], swimming_time_fg[1000], swimming_time_cs[1000], speed_fg, speed_cs; 
	float quicker_time, quicker_distance, quicker_time_final, quicker_distance_final;
	
	quicker_time_final = 20;
	quicker_distance_final = 20;
	
	speed_fg = (speed[0] * 1.475);
	speed_cs = (speed[0] * 0.9);
	
	srand(time_t(NULL));

	std::cout << "Swimming Distance       Time fg (hours) Time cs (hours)" << std::endl;
	
	// Creating 1000 random distances between 1 and 20km and outputting them
	for (i = 0; i < 1000; i++) {

		random_distances[i] = rand() % 20 + 1;
		swimming_time_fg[i] = (random_distances[i] / speed_fg);
		swimming_time_cs[i] = (random_distances[i] / speed_cs);
		full_time_fg[i] = (swimming_time_fg[i] + time[0] + time[1]);
		full_time_cs[i] = (swimming_time_cs[i] + time[2] + time[3]);
		std::cout << random_distances[i] << "\t" << "\t" << "\t" << full_time_fg[i] << "\t" << "\t" << full_time_cs[i] << std::endl;
        
        if (full_time_fg[i] < full_time_cs[i]) {
            
            quicker_time = full_time_fg[i];
            quicker_distance = random_distances[i];
            
            if (quicker_time < quicker_time_final) {
                
                quicker_time_final = quicker_time;
                quicker_distance_final = quicker_distance;
            }   
            else {
            
            } 
        }
        else {
            
        }
	}
	
	std::cout << "The shortest distance of swimming for the overall time to be quicker than the cycling shoes and sunglasses is " << quicker_distance_final << " km" << std::endl; 
    std::cout << "The overall time includes the distances for cycling (40km) and running (10km). The overall time is " << quicker_time_final << " hours" << std::endl;
    
}

